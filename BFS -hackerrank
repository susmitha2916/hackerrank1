public class Solution {

    static int[] bfs(int n, int m, int[][] edges, int s) {
        // Complete this function
        boolean[] visited = new boolean[n];
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) { visited[i] = false; }
        Stack<Integer> o1 = new Stack<>();
        Stack<Integer> o2 = new Stack<>();
        
        o1.add(s);
        int dist = 0;
        while (true) {
            while (!o1.isEmpty()) {
                int v = o1.pop();
                if (visited[v - 1] == false) {
                    visited[v - 1] = true;
                    distance[v - 1] = dist;
                    for (int[] e1 : edges) {
                        if (e1[0] == v || e1[1] == v) {
                            o2.add(e1[0]);
                            o2.add(e1[1]);
                        }
                    }
                }
            }
            dist += 6;
            while (!o2.isEmpty()) {
                int v = o2.pop();
                if (visited[v - 1] == false) {
                    visited[v - 1] = true;
                    distance[v - 1] = dist;
                    for (int[] edge : edges) {
                        if (edge[0] == v || edge[1] == v) {
                            o1.add(edge[0]);
                            o1.add(edge[1]);
                        }
                    }
                }
            }
            dist += 6;
            if (o1.isEmpty() && o2.isEmpty()) break;
        }
        return distance;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a = 0; a< q; a++){
            int n = in.nextInt();
            int m = in.nextInt();
            int[][] edges = new int[m][2];
            for(int edges_i = 0; edges_i < m; edges_i++){
                for(int edges_j = 0; edges_j < 2; edges_j++){
                    edges[edges_i][edges_j] = in.nextInt();
                }
            }
            int s = in.nextInt();
            int[] result = bfs(n, m, edges, s);
            for (int i = 0; i < result.length; i++) {
                if (i != s - 1) {
                    if (result[i] == 0) System.out.print("-1 ");
                    else System.out.print(result[i] + " ");
                }
            }
            System.out.println("");


        }
        in.close();
    }
}
